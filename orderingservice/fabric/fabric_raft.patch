diff --git a/orderer/common/blockcutter/blockcutter.go b/orderer/common/blockcutter/blockcutter.go
index c4e06d1c1..54e87af4f 100644
--- a/orderer/common/blockcutter/blockcutter.go
+++ b/orderer/common/blockcutter/blockcutter.go
@@ -131,7 +131,9 @@ func (r *receiver) Ordered(msg *cb.Envelope) (messageBatches [][]*cb.Envelope, p
 // Cut returns the current batch and starts a new one
 func (r *receiver) Cut() []*cb.Envelope {
 	if r.pendingBatch != nil {
-		r.Metrics.BlockFillDuration.With("channel", r.ChannelID).Observe(time.Since(r.PendingBatchStartTime).Seconds())
+		t := time.Since(r.PendingBatchStartTime)
+		logger.Infof("Cut block within %v", t)
+		r.Metrics.BlockFillDuration.With("channel", r.ChannelID).Observe(t.Seconds())
 	}
 	r.PendingBatchStartTime = time.Time{}
 	batch := r.pendingBatch
diff --git a/orderer/common/msgprocessor/standardchannel.go b/orderer/common/msgprocessor/standardchannel.go
index d98767639..041055806 100644
--- a/orderer/common/msgprocessor/standardchannel.go
+++ b/orderer/common/msgprocessor/standardchannel.go
@@ -11,7 +11,6 @@ import (
 	"github.com/hyperledger/fabric-protos-go/orderer"
 	"github.com/hyperledger/fabric/bccsp"
 	"github.com/hyperledger/fabric/common/channelconfig"
-	"github.com/hyperledger/fabric/common/policies"
 	"github.com/hyperledger/fabric/internal/pkg/identity"
 	"github.com/hyperledger/fabric/protoutil"
 
@@ -67,7 +66,7 @@ func CreateStandardChannelFilters(filterSupport channelconfig.Resources, config
 	rules := []Rule{
 		EmptyRejectRule,
 		NewSizeFilter(filterSupport),
-		NewSigFilter(policies.ChannelWriters, policies.ChannelOrdererWriters, filterSupport),
+		//NewSigFilter(policies.ChannelWriters, policies.ChannelOrdererWriters, filterSupport),
 	}
 
 	if !config.General.Authentication.NoExpirationChecks {
diff --git a/orderer/common/msgprocessor/systemchannel.go b/orderer/common/msgprocessor/systemchannel.go
index fb2f0e873..df77a9b83 100644
--- a/orderer/common/msgprocessor/systemchannel.go
+++ b/orderer/common/msgprocessor/systemchannel.go
@@ -14,7 +14,6 @@ import (
 	"github.com/hyperledger/fabric/bccsp"
 	"github.com/hyperledger/fabric/common/channelconfig"
 	"github.com/hyperledger/fabric/common/configtx"
-	"github.com/hyperledger/fabric/common/policies"
 	"github.com/hyperledger/fabric/internal/pkg/identity"
 	"github.com/hyperledger/fabric/orderer/common/localconfig"
 	"github.com/hyperledger/fabric/protoutil"
@@ -60,7 +59,7 @@ func CreateSystemChannelFilters(
 	rules := []Rule{
 		EmptyRejectRule,
 		NewSizeFilter(ledgerResources),
-		NewSigFilter(policies.ChannelWriters, policies.ChannelOrdererWriters, ledgerResources),
+		//NewSigFilter(policies.ChannelWriters, policies.ChannelOrdererWriters, ledgerResources),
 		NewSystemChannelFilter(ledgerResources, chainCreator, validator),
 	}
 	if !config.General.Authentication.NoExpirationChecks {
diff --git a/orderer/consensus/etcdraft/chain.go b/orderer/consensus/etcdraft/chain.go
index ecad25984..3827d8d08 100644
--- a/orderer/consensus/etcdraft/chain.go
+++ b/orderer/consensus/etcdraft/chain.go
@@ -135,8 +135,7 @@ type Options struct {
 }
 
 type submit struct {
-	req    *orderer.SubmitRequest
-	leader chan uint64
+	req *orderer.SubmitRequest
 }
 
 type gc struct {
@@ -262,7 +261,7 @@ func NewChain(
 		rpc:               rpc,
 		channelID:         support.ChannelID(),
 		raftID:            opts.RaftID,
-		submitC:           make(chan *submit),
+		submitC:           make(chan *submit, 10),
 		applyC:            make(chan apply),
 		haltC:             make(chan struct{}),
 		doneC:             make(chan struct{}),
@@ -543,21 +542,21 @@ func (c *Chain) Submit(req *orderer.SubmitRequest, sender uint64) error {
 		return err
 	}
 
-	leadC := make(chan uint64, 1)
-	select {
-	case c.submitC <- &submit{req, leadC}:
-		lead := <-leadC
-		if lead == raft.None {
-			c.Metrics.ProposalFailures.Add(1)
-			return errors.Errorf("no Raft leader")
-		}
+	lead := atomic.LoadUint64(&c.lastKnownLeader)
+	if lead == raft.None {
+		c.Metrics.ProposalFailures.Add(1)
+		return errors.Errorf("no Raft leader")
+	}
 
-		if lead != c.raftID {
-			if err := c.forwardToLeader(lead, req); err != nil {
-				return err
-			}
+	if lead != c.raftID {
+		if err := c.forwardToLeader(lead, req); err != nil {
+			return err
 		}
+		return nil
+	}
 
+	select {
+	case c.submitC <- &submit{req}:
 	case <-c.doneC:
 		c.Metrics.ProposalFailures.Add(1)
 		return errors.Errorf("chain is stopped")
@@ -670,12 +669,13 @@ func (c *Chain) run() {
 			for {
 				select {
 				case b := <-ch:
+					t := time.Now()
 					data := protoutil.MarshalOrPanic(b)
 					if err := c.Node.Propose(ctx, data); err != nil {
 						c.logger.Errorf("Failed to propose block [%d] to raft and discard %d blocks in queue: %s", b.Header.Number, len(ch), err)
 						return
 					}
-					c.logger.Debugf("Proposed block [%d] to raft consensus", b.Header.Number)
+					c.logger.Infof("Proposed block [%d] to raft consensus; took %v", b.Header.Number, time.Since(t))
 
 				case <-ctx.Done():
 					c.logger.Debugf("Quit proposing blocks, discarded %d blocks in the queue", len(ch))
@@ -705,16 +705,6 @@ func (c *Chain) run() {
 				continue
 			}
 
-			if soft.RaftState == raft.StatePreCandidate || soft.RaftState == raft.StateCandidate {
-				s.leader <- raft.None
-				continue
-			}
-
-			s.leader <- soft.Lead
-			if soft.Lead != c.raftID {
-				continue
-			}
-
 			batches, pending, err := c.ordered(s.req)
 			if err != nil {
 				c.logger.Errorf("Failed to order message: %s", err)
@@ -917,10 +907,11 @@ func (c *Chain) writeBlock(block *common.Block, index uint64) {
 func (c *Chain) ordered(msg *orderer.SubmitRequest) (batches [][]*common.Envelope, pending bool, err error) {
 	seq := c.support.Sequence()
 
-	isconfig, err := c.isConfig(msg.Payload)
-	if err != nil {
-		return nil, false, errors.Errorf("bad message: %s", err)
-	}
+	//isconfig, err := c.isConfig(msg.Payload)
+	//if err != nil {
+	//	return nil, false, errors.Errorf("bad message: %s", err)
+	//}
+	isconfig := false
 
 	if isconfig {
 		// ConfigMsg
