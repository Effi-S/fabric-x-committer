
# create org
# configure orderer.yaml
# create gensis block
# bootstrap

# export FABRIC_PATH=your/path/to/fabric
fabric_path := env_var_or_default('FABRIC_PATH', env_var('GOPATH') / "src/github.com/hyperledger/fabric")
fabric_bins := fabric_path / "build/bin"

out := justfile_directory() / "out"
cryptogen_out := out / "orgs"
configtxgen_out := out / "mychannelblock"

orderer_credentials := "orgs/ordererOrganizations/orderer.org/orderers/raft<<id>>.orderer.org"
orderer_msp := orderer_credentials / "msp"
orderer_tls := orderer_credentials / "tls"
orderer_port := "705<<x>>"

client_org := "Org1"
client_credentials := "orgs/peerOrganizations/org1.com/users/User1@org1.com"

channelID := "mychannel"

#consensus_type := "smartbft"
consensus_type := "etcdraft"

#deployment_type := "local"
deployment_type := "testbed"

config_path := join(justfile_directory(), "configs", consensus_type, deployment_type)

init: clean cryptogen genesis

# builds the fabric binaries
# make sure you on the expected fabric version branch
# git checkout v2.4.7 -b v2.4.7-branch
build_fabric:
    make -C {{fabric_path}} native

cryptogen:
    {{fabric_bins}}/cryptogen \
    generate \
    --config="{{config_path}}/crypto-config.yaml" \
    --output="{{cryptogen_out}}"

genesis channel_id=("mychannel") profil=("SampleDevModeEtcdRaft"):
    {{fabric_bins}}/configtxgen \
    -configPath "{{config_path}}" \
    -outputBlock "{{configtxgen_out}}" \
    -profile {{profil}} \
    -channelID {{channel_id}}

start: init
    tmux new-session -d -s "orderer" \; \
    split-window -t "orderer:0" -v \; \
    split-window -t "orderer:0.0" -h \; \
    split-window -t "orderer:0.2" -h \; \
    split-window -t "orderer:0.3" -h \; \
    split-window -t "orderer:0.4" -v \; \
    split-window -t "orderer:0.5" -v \; \
    \
    send-keys -t "orderer:0.0" "just run_orderer 0" Enter \; \
    send-keys -t "orderer:0.1" "just run_orderer 1" Enter \; \
    send-keys -t "orderer:0.2" "just run_orderer 2" Enter \; \
    \
    attach-session -t "orderer:0.5"
#    send-keys -t "orderer:0.3" "just run_orderer 3" Enter \; \

start-remote: init-remote run-remote

kill:
    tmux kill-session -t "orderer"

kill-remote-host host=("tokentestbed1.sl.cloud9.ibm.com"):
   ssh root@{{host}} 'tmux kill-session -t "orderer"'

kill-remote:
    just kill-remote-host tokentestbed1.sl.cloud9.ibm.com
    just kill-remote-host tokentestbed2.sl.cloud9.ibm.com
    just kill-remote-host tokentestbed3.sl.cloud9.ibm.com
    just kill-remote-host tokentestbed4.sl.cloud9.ibm.com
    just kill-remote-host tokentestbed5.sl.cloud9.ibm.com
    just kill-remote-host tokentestbed13.sl.cloud9.ibm.com
    just kill-remote-host tokentestbed14.sl.cloud9.ibm.com

init-session-host host=("tokentestbed1.sl.cloud9.ibm.com"):
    ssh root@{{host}} 'tmux new-session -d -s "orderer"' &

init-remote:
    just init-session-host tokentestbed1.sl.cloud9.ibm.com
    just init-session-host tokentestbed2.sl.cloud9.ibm.com
    just init-session-host tokentestbed3.sl.cloud9.ibm.com
    just init-session-host tokentestbed4.sl.cloud9.ibm.com
    just init-session-host tokentestbed5.sl.cloud9.ibm.com
    just init-session-host tokentestbed13.sl.cloud9.ibm.com
    just init-session-host tokentestbed14.sl.cloud9.ibm.com

run_orderer n=("0"):
    FABRIC_CFG_PATH="{{config_path}}" \
    FABRIC_LOGGING_SPEC="INFO" \
    ORDERER_GENERAL_LOCALMSPID="orderer" \
    ORDERER_GENERAL_LOCALMSPDIR="{{out}}/{{replace(orderer_msp, "<<id>>", n)}}" \
    ORDERER_GENERAL_LISTENPORT="{{replace(orderer_port, "<<x>>", n)}}" \
    ORDERER_GENERAL_BOOTSTRAPMETHOD=none \
    ORDERER_CHANNELPARTICIPATION_ENABLED=true \
    ORDERER_GENERAL_TLS_ENABLED="true" \
    ORDERER_GENERAL_TLS_PRIVATEKEY="{{out}}/{{replace(orderer_tls, "<<id>>", n)}}/server.key" \
    ORDERER_GENERAL_TLS_CERTIFICATE="{{out}}/{{replace(orderer_tls, "<<id>>", n)}}/server.crt" \
    ORDERER_GENERAL_TLS_ROOTCAS="[{{out}}/{{replace(orderer_tls, "<<id>>", n)}}/ca.crt]" \
    ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE="{{out}}/{{replace(orderer_tls, "<<id>>", n)}}/server.crt" \
    ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY="{{out}}/{{replace(orderer_tls, "<<id>>", n)}}/server.key" \
    ORDERER_GENERAL_CLUSTER_ROOTCAS="[{{out}}/{{replace(orderer_tls, "<<id>>", n)}}/ca.crt]" \
    ORDERER_OPERATIONS_LISTENADDRESS="{{replace("localhost:844<<x>>", "<<x>>", n)}}" \
    ORDERER_ADMIN_LISTENADDRESS="{{replace("localhost:944<<x>>", "<<x>>", n)}}" \
    ORDERER_FILELEDGER_LOCATION="{{out}}/hyperledger/production/orderer_{{n}}" \
    ORDERER_CONSENSUS_WALDIR="{{out}}/hyperledger/production/orderer_{{n}}/etcdraft/wal" \
    ORDERER_CONSENSUS_SNAPDIR="{{out}}/hyperledger/production/orderer_{{n}}/etcdraft/snapshot" \
    {{fabric_bins}}/orderer

run_orderer_remote n=("0") host=("tokentestbed1.sl.cloud9.ibm.com"):
    ssh root@{{host}} "tmux send -t orderer '\
    rm -rf ./config/out/hyperledger; \
    FABRIC_CFG_PATH="./config" \
    FABRIC_LOGGING_SPEC="ERROR" \
    ORDERER_GENERAL_LOCALMSPID="orderer" \
    ORDERER_GENERAL_LOCALMSPDIR="out/{{replace(orderer_msp, "<<id>>", n)}}" \
    ORDERER_GENERAL_BOOTSTRAPMETHOD=none \
    ORDERER_CHANNELPARTICIPATION_ENABLED=true \
    ORDERER_GENERAL_TLS_ENABLED="true" \
    ORDERER_GENERAL_TLS_PRIVATEKEY="out/{{replace(orderer_tls, "<<id>>", n)}}/server.key" \
    ORDERER_GENERAL_TLS_CERTIFICATE="out/{{replace(orderer_tls, "<<id>>", n)}}/server.crt" \
    ORDERER_GENERAL_TLS_ROOTCAS="[out/{{replace(orderer_tls, "<<id>>", n)}}/ca.crt]" \
    ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE="out/{{replace(orderer_tls, "<<id>>", n)}}/server.crt" \
    ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY="out/{{replace(orderer_tls, "<<id>>", n)}}/server.key" \
    ORDERER_GENERAL_CLUSTER_ROOTCAS="[out/{{replace(orderer_tls, "<<id>>", n)}}/ca.crt]" \
    ORDERER_FILELEDGER_LOCATION="out/hyperledger/production/orderer_{{n}}" \
    ORDERER_CONSENSUS_TYPE="etcdraft" \
    ORDERER_CONSENSUS_WALDIR="config/out/hyperledger/production/orderer_{{n}}/etcdraft/wal" \
    ORDERER_CONSENSUS_SNAPDIR="config/out/hyperledger/production/orderer_{{n}}/etcdraft/snapshot" \
    ./bin/orderer 2>&1 | tee os.log' ENTER" &

run-remote:
    just run_orderer_remote 0 tokentestbed1.sl.cloud9.ibm.com
    just run_orderer_remote 1 tokentestbed2.sl.cloud9.ibm.com
    just run_orderer_remote 2 tokentestbed3.sl.cloud9.ibm.com
    just run_orderer_remote 3 tokentestbed4.sl.cloud9.ibm.com
    just run_orderer_remote 4 tokentestbed5.sl.cloud9.ibm.com

join-i n=("0"):
    {{fabric_bins}}/osnadmin channel join --channelID mychannel --config-block {{configtxgen_out}} -o {{replace("localhost:944<<x>>", "<<x>>", n)}}

join:
    just join-i 0
    just join-i 1
    just join-i 2
#    just join-i 3

join-remote:
    {{fabric_bins}}/osnadmin channel join --channelID mychannel --config-block {{configtxgen_out}} -o tokentestbed1.sl.cloud9.ibm.com:9443
    {{fabric_bins}}/osnadmin channel join --channelID mychannel --config-block {{configtxgen_out}} -o tokentestbed2.sl.cloud9.ibm.com:9443
    {{fabric_bins}}/osnadmin channel join --channelID mychannel --config-block {{configtxgen_out}} -o tokentestbed3.sl.cloud9.ibm.com:9443
    {{fabric_bins}}/osnadmin channel join --channelID mychannel --config-block {{configtxgen_out}} -o tokentestbed4.sl.cloud9.ibm.com:9443
    {{fabric_bins}}/osnadmin channel join --channelID mychannel --config-block {{configtxgen_out}} -o tokentestbed5.sl.cloud9.ibm.com:9443


submit:
    GOGC=15000 \
    SC_ORDERER_SUBMITTER_ORDERER_CONNECTION_PROFILE="{{config_path}}/orderer-connection-profile.yaml" \
    go run clients/cmd/submitter/main.go --configs "{{config_path}}/orderer-submitter-config.yaml"

submit-remote host=("tokentestbed14.sl.cloud9.ibm.com"):
    ssh root@{{host}} "tmux send -t orderer ' \
    cd /root/config && \
    GOGC=15000 \
    ../bin/orderersubmitter --configs /root/config/orderer-submitter-config.yaml \
    ' ENTER"

listen:
    SC_ORDERER_LISTENER_ORDERER_CONNECTION_PROFILE="{{config_path}}/orderer-connection-profile.yaml" \
    go run clients/cmd/listener/main.go --configs "{{config_path}}/orderer-listener-config.yaml" --quiet

listen-remote host=("tokentestbed13.sl.cloud9.ibm.com"):
    ssh root@{{host}} "tmux send -t orderer ' \
    cd /root/config && \
    ../bin/ordererlistener --configs /root/config/orderer-listener-config.yaml --quiet \
    ' ENTER"

clean:
    rm -rf "{{out}}"

deploy: pack
    just upload tokentestbed1.sl.cloud9.ibm.com
    just upload tokentestbed2.sl.cloud9.ibm.com
    just upload tokentestbed3.sl.cloud9.ibm.com
    just upload tokentestbed4.sl.cloud9.ibm.com
    just upload tokentestbed5.sl.cloud9.ibm.com
    just upload tokentestbed13.sl.cloud9.ibm.com
    just upload tokentestbed14.sl.cloud9.ibm.com

tar_cmd := if os() == "macos" { "/opt/homebrew/opt/gnu-tar/libexec/gnubin/tar" } else { "tar" }

pack:
    rm -rf tmp;
    mkdir -p tmp; cp {{config_path}}/* tmp; cp -R ./out tmp
    cd tmp && {{tar_cmd}} -czf conf.tar.gz *;


upload host=("tokentestbed1.sl.cloud9.ibm.com"):
    rsync -avz --progress tmp/conf.tar.gz root@{{host}}:~/
    ssh root@{{host}} "mkdir -p config && tar -xzf conf.tar.gz -C config"

build:
    go build -o build/bins/orderersubmitter clients/cmd/submitter/main.go
    go build -o build/bins/ordererlistener clients/cmd/listener/main.go
