syntax = "proto3";

option go_package = "github.ibm.com/distributed-trust-research/scalable-committer/shardsservice";

package shardsservice;

service Shards {
    rpc SetupShards(ShardsSetupRequest) returns (Empty);
    rpc DeleteShards(Empty) returns (Empty);
    
    rpc StartPhaseOneStream(stream PhaseOneRequestBatch) returns (stream PhaseOneResponseBatch);
    rpc StartPhaseTwoStream(stream PhaseTwoRequestBatch) returns (Empty);
}

message ShardsSetupRequest {
    uint32 first_shard_id = 1;
    uint32 last_shard_id = 2;
}

message SerialNumbers {
    repeated bytes serial_numbers = 1;
}

message PhaseOneRequest {
    uint64 block_num  = 1;
    uint64 tx_num = 2;
    map<uint32, SerialNumbers> shardid_to_serial_numbers = 3;
    bool is_complete_tx = 4;
}

message PhaseOneRequestBatch {
    repeated PhaseOneRequest requests = 1;
}

message PhaseOneResponse {
    uint64 block_num  = 1;
    uint64 tx_num = 2;
    enum Status {        
        CAN_COMMIT = 0;
        CANNOT_COMMITTED = 1;
        COMMIT_DONE = 2;
    }
    Status status = 3;
}

message PhaseOneResponseBatch {
    repeated PhaseOneResponse responses = 1;
}

message PhaseTwoRequest {
    uint64 block_num  = 1;
    uint64 tx_num = 2;
    enum Instruction {        
        COMMIT = 0;
        FORGET = 1;
    }
    Instruction instruction = 3;
}

message PhaseTwoRequestBatch {
    repeated PhaseTwoRequest requests = 1;
}

message Empty {
}
