// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: shardsservice/server.proto

package shardsservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	SetupShards(ctx context.Context, in *ShardsSetupRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteShards(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StartPhaseOneStream(ctx context.Context, opts ...grpc.CallOption) (Server_StartPhaseOneStreamClient, error)
	StartPhaseTwoStream(ctx context.Context, opts ...grpc.CallOption) (Server_StartPhaseTwoStreamClient, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) SetupShards(ctx context.Context, in *ShardsSetupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/shardsservice.Server/SetupShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) DeleteShards(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/shardsservice.Server/DeleteShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) StartPhaseOneStream(ctx context.Context, opts ...grpc.CallOption) (Server_StartPhaseOneStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[0], "/shardsservice.Server/StartPhaseOneStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStartPhaseOneStreamClient{stream}
	return x, nil
}

type Server_StartPhaseOneStreamClient interface {
	Send(*PhaseOneRequestBatch) error
	Recv() (*PhaseOneResponseBatch, error)
	grpc.ClientStream
}

type serverStartPhaseOneStreamClient struct {
	grpc.ClientStream
}

func (x *serverStartPhaseOneStreamClient) Send(m *PhaseOneRequestBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverStartPhaseOneStreamClient) Recv() (*PhaseOneResponseBatch, error) {
	m := new(PhaseOneResponseBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serverClient) StartPhaseTwoStream(ctx context.Context, opts ...grpc.CallOption) (Server_StartPhaseTwoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[1], "/shardsservice.Server/StartPhaseTwoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStartPhaseTwoStreamClient{stream}
	return x, nil
}

type Server_StartPhaseTwoStreamClient interface {
	Send(*PhaseTwoRequestBatch) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type serverStartPhaseTwoStreamClient struct {
	grpc.ClientStream
}

func (x *serverStartPhaseTwoStreamClient) Send(m *PhaseTwoRequestBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverStartPhaseTwoStreamClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerServer is the server API for Server service.
// All implementations must embed UnimplementedServerServer
// for forward compatibility
type ServerServer interface {
	SetupShards(context.Context, *ShardsSetupRequest) (*Empty, error)
	DeleteShards(context.Context, *Empty) (*Empty, error)
	StartPhaseOneStream(Server_StartPhaseOneStreamServer) error
	StartPhaseTwoStream(Server_StartPhaseTwoStreamServer) error
	mustEmbedUnimplementedServerServer()
}

// UnimplementedServerServer must be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (UnimplementedServerServer) SetupShards(context.Context, *ShardsSetupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupShards not implemented")
}
func (UnimplementedServerServer) DeleteShards(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShards not implemented")
}
func (UnimplementedServerServer) StartPhaseOneStream(Server_StartPhaseOneStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartPhaseOneStream not implemented")
}
func (UnimplementedServerServer) StartPhaseTwoStream(Server_StartPhaseTwoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartPhaseTwoStream not implemented")
}
func (UnimplementedServerServer) mustEmbedUnimplementedServerServer() {}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	mustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s grpc.ServiceRegistrar, srv ServerServer) {
	s.RegisterService(&Server_ServiceDesc, srv)
}

func _Server_SetupShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardsSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).SetupShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shardsservice.Server/SetupShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).SetupShards(ctx, req.(*ShardsSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_DeleteShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).DeleteShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shardsservice.Server/DeleteShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).DeleteShards(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_StartPhaseOneStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerServer).StartPhaseOneStream(&serverStartPhaseOneStreamServer{stream})
}

type Server_StartPhaseOneStreamServer interface {
	Send(*PhaseOneResponseBatch) error
	Recv() (*PhaseOneRequestBatch, error)
	grpc.ServerStream
}

type serverStartPhaseOneStreamServer struct {
	grpc.ServerStream
}

func (x *serverStartPhaseOneStreamServer) Send(m *PhaseOneResponseBatch) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverStartPhaseOneStreamServer) Recv() (*PhaseOneRequestBatch, error) {
	m := new(PhaseOneRequestBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Server_StartPhaseTwoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerServer).StartPhaseTwoStream(&serverStartPhaseTwoStreamServer{stream})
}

type Server_StartPhaseTwoStreamServer interface {
	SendAndClose(*Empty) error
	Recv() (*PhaseTwoRequestBatch, error)
	grpc.ServerStream
}

type serverStartPhaseTwoStreamServer struct {
	grpc.ServerStream
}

func (x *serverStartPhaseTwoStreamServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverStartPhaseTwoStreamServer) Recv() (*PhaseTwoRequestBatch, error) {
	m := new(PhaseTwoRequestBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server_ServiceDesc is the grpc.ServiceDesc for Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shardsservice.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupShards",
			Handler:    _Server_SetupShards_Handler,
		},
		{
			MethodName: "DeleteShards",
			Handler:    _Server_DeleteShards_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartPhaseOneStream",
			Handler:       _Server_StartPhaseOneStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StartPhaseTwoStream",
			Handler:       _Server_StartPhaseTwoStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "shardsservice/server.proto",
}
