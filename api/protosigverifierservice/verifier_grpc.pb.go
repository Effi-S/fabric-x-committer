// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: api/protosigverifierservice/verifier.proto

package protosigverifierservice

import (
	context "context"
	protoblocktx "github.ibm.com/decentralized-trust-research/scalable-committer/api/protoblocktx"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Verifier_UpdatePolicies_FullMethodName = "/protosigverifierservice.Verifier/UpdatePolicies"
	Verifier_StartStream_FullMethodName    = "/protosigverifierservice.Verifier/StartStream"
)

// VerifierClient is the client API for Verifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VerifierClient interface {
	UpdatePolicies(ctx context.Context, in *protoblocktx.Policies, opts ...grpc.CallOption) (*Empty, error)
	StartStream(ctx context.Context, opts ...grpc.CallOption) (Verifier_StartStreamClient, error)
}

type verifierClient struct {
	cc grpc.ClientConnInterface
}

func NewVerifierClient(cc grpc.ClientConnInterface) VerifierClient {
	return &verifierClient{cc}
}

func (c *verifierClient) UpdatePolicies(ctx context.Context, in *protoblocktx.Policies, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Verifier_UpdatePolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierClient) StartStream(ctx context.Context, opts ...grpc.CallOption) (Verifier_StartStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Verifier_ServiceDesc.Streams[0], Verifier_StartStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &verifierStartStreamClient{stream}
	return x, nil
}

type Verifier_StartStreamClient interface {
	Send(*RequestBatch) error
	Recv() (*ResponseBatch, error)
	grpc.ClientStream
}

type verifierStartStreamClient struct {
	grpc.ClientStream
}

func (x *verifierStartStreamClient) Send(m *RequestBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *verifierStartStreamClient) Recv() (*ResponseBatch, error) {
	m := new(ResponseBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VerifierServer is the server API for Verifier service.
// All implementations must embed UnimplementedVerifierServer
// for forward compatibility
type VerifierServer interface {
	UpdatePolicies(context.Context, *protoblocktx.Policies) (*Empty, error)
	StartStream(Verifier_StartStreamServer) error
	mustEmbedUnimplementedVerifierServer()
}

// UnimplementedVerifierServer must be embedded to have forward compatible implementations.
type UnimplementedVerifierServer struct {
}

func (UnimplementedVerifierServer) UpdatePolicies(context.Context, *protoblocktx.Policies) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicies not implemented")
}
func (UnimplementedVerifierServer) StartStream(Verifier_StartStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedVerifierServer) mustEmbedUnimplementedVerifierServer() {}

// UnsafeVerifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VerifierServer will
// result in compilation errors.
type UnsafeVerifierServer interface {
	mustEmbedUnimplementedVerifierServer()
}

func RegisterVerifierServer(s grpc.ServiceRegistrar, srv VerifierServer) {
	s.RegisterService(&Verifier_ServiceDesc, srv)
}

func _Verifier_UpdatePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoblocktx.Policies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServer).UpdatePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Verifier_UpdatePolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServer).UpdatePolicies(ctx, req.(*protoblocktx.Policies))
	}
	return interceptor(ctx, in, info, handler)
}

func _Verifier_StartStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VerifierServer).StartStream(&verifierStartStreamServer{stream})
}

type Verifier_StartStreamServer interface {
	Send(*ResponseBatch) error
	Recv() (*RequestBatch, error)
	grpc.ServerStream
}

type verifierStartStreamServer struct {
	grpc.ServerStream
}

func (x *verifierStartStreamServer) Send(m *ResponseBatch) error {
	return x.ServerStream.SendMsg(m)
}

func (x *verifierStartStreamServer) Recv() (*RequestBatch, error) {
	m := new(RequestBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Verifier_ServiceDesc is the grpc.ServiceDesc for Verifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Verifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protosigverifierservice.Verifier",
	HandlerType: (*VerifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePolicies",
			Handler:    _Verifier_UpdatePolicies_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartStream",
			Handler:       _Verifier_StartStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/protosigverifierservice/verifier.proto",
}
