// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: api/protovcservice/vcservice.proto

package protovcservice

import (
	context "context"
	protoblocktx "github.ibm.com/decentralized-trust-research/scalable-committer/api/protoblocktx"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ValidationAndCommitService_StartValidateAndCommitStream_FullMethodName         = "/protovcservice.ValidationAndCommitService/StartValidateAndCommitStream"
	ValidationAndCommitService_NumberOfWaitingTransactionsForStatus_FullMethodName = "/protovcservice.ValidationAndCommitService/NumberOfWaitingTransactionsForStatus"
	ValidationAndCommitService_SetLastCommittedBlockNumber_FullMethodName          = "/protovcservice.ValidationAndCommitService/SetLastCommittedBlockNumber"
	ValidationAndCommitService_GetLastCommittedBlockNumber_FullMethodName          = "/protovcservice.ValidationAndCommitService/GetLastCommittedBlockNumber"
)

// ValidationAndCommitServiceClient is the client API for ValidationAndCommitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidationAndCommitServiceClient interface {
	StartValidateAndCommitStream(ctx context.Context, opts ...grpc.CallOption) (ValidationAndCommitService_StartValidateAndCommitStreamClient, error)
	NumberOfWaitingTransactionsForStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WaitingTransactions, error)
	SetLastCommittedBlockNumber(ctx context.Context, in *protoblocktx.LastCommittedBlock, opts ...grpc.CallOption) (*Empty, error)
	GetLastCommittedBlockNumber(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*protoblocktx.LastCommittedBlock, error)
}

type validationAndCommitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValidationAndCommitServiceClient(cc grpc.ClientConnInterface) ValidationAndCommitServiceClient {
	return &validationAndCommitServiceClient{cc}
}

func (c *validationAndCommitServiceClient) StartValidateAndCommitStream(ctx context.Context, opts ...grpc.CallOption) (ValidationAndCommitService_StartValidateAndCommitStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ValidationAndCommitService_ServiceDesc.Streams[0], ValidationAndCommitService_StartValidateAndCommitStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &validationAndCommitServiceStartValidateAndCommitStreamClient{stream}
	return x, nil
}

type ValidationAndCommitService_StartValidateAndCommitStreamClient interface {
	Send(*TransactionBatch) error
	Recv() (*TransactionStatus, error)
	grpc.ClientStream
}

type validationAndCommitServiceStartValidateAndCommitStreamClient struct {
	grpc.ClientStream
}

func (x *validationAndCommitServiceStartValidateAndCommitStreamClient) Send(m *TransactionBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *validationAndCommitServiceStartValidateAndCommitStreamClient) Recv() (*TransactionStatus, error) {
	m := new(TransactionStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *validationAndCommitServiceClient) NumberOfWaitingTransactionsForStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WaitingTransactions, error) {
	out := new(WaitingTransactions)
	err := c.cc.Invoke(ctx, ValidationAndCommitService_NumberOfWaitingTransactionsForStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validationAndCommitServiceClient) SetLastCommittedBlockNumber(ctx context.Context, in *protoblocktx.LastCommittedBlock, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ValidationAndCommitService_SetLastCommittedBlockNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validationAndCommitServiceClient) GetLastCommittedBlockNumber(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*protoblocktx.LastCommittedBlock, error) {
	out := new(protoblocktx.LastCommittedBlock)
	err := c.cc.Invoke(ctx, ValidationAndCommitService_GetLastCommittedBlockNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidationAndCommitServiceServer is the server API for ValidationAndCommitService service.
// All implementations must embed UnimplementedValidationAndCommitServiceServer
// for forward compatibility
type ValidationAndCommitServiceServer interface {
	StartValidateAndCommitStream(ValidationAndCommitService_StartValidateAndCommitStreamServer) error
	NumberOfWaitingTransactionsForStatus(context.Context, *Empty) (*WaitingTransactions, error)
	SetLastCommittedBlockNumber(context.Context, *protoblocktx.LastCommittedBlock) (*Empty, error)
	GetLastCommittedBlockNumber(context.Context, *Empty) (*protoblocktx.LastCommittedBlock, error)
	mustEmbedUnimplementedValidationAndCommitServiceServer()
}

// UnimplementedValidationAndCommitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedValidationAndCommitServiceServer struct {
}

func (UnimplementedValidationAndCommitServiceServer) StartValidateAndCommitStream(ValidationAndCommitService_StartValidateAndCommitStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartValidateAndCommitStream not implemented")
}
func (UnimplementedValidationAndCommitServiceServer) NumberOfWaitingTransactionsForStatus(context.Context, *Empty) (*WaitingTransactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NumberOfWaitingTransactionsForStatus not implemented")
}
func (UnimplementedValidationAndCommitServiceServer) SetLastCommittedBlockNumber(context.Context, *protoblocktx.LastCommittedBlock) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLastCommittedBlockNumber not implemented")
}
func (UnimplementedValidationAndCommitServiceServer) GetLastCommittedBlockNumber(context.Context, *Empty) (*protoblocktx.LastCommittedBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastCommittedBlockNumber not implemented")
}
func (UnimplementedValidationAndCommitServiceServer) mustEmbedUnimplementedValidationAndCommitServiceServer() {
}

// UnsafeValidationAndCommitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidationAndCommitServiceServer will
// result in compilation errors.
type UnsafeValidationAndCommitServiceServer interface {
	mustEmbedUnimplementedValidationAndCommitServiceServer()
}

func RegisterValidationAndCommitServiceServer(s grpc.ServiceRegistrar, srv ValidationAndCommitServiceServer) {
	s.RegisterService(&ValidationAndCommitService_ServiceDesc, srv)
}

func _ValidationAndCommitService_StartValidateAndCommitStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValidationAndCommitServiceServer).StartValidateAndCommitStream(&validationAndCommitServiceStartValidateAndCommitStreamServer{stream})
}

type ValidationAndCommitService_StartValidateAndCommitStreamServer interface {
	Send(*TransactionStatus) error
	Recv() (*TransactionBatch, error)
	grpc.ServerStream
}

type validationAndCommitServiceStartValidateAndCommitStreamServer struct {
	grpc.ServerStream
}

func (x *validationAndCommitServiceStartValidateAndCommitStreamServer) Send(m *TransactionStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *validationAndCommitServiceStartValidateAndCommitStreamServer) Recv() (*TransactionBatch, error) {
	m := new(TransactionBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ValidationAndCommitService_NumberOfWaitingTransactionsForStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationAndCommitServiceServer).NumberOfWaitingTransactionsForStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidationAndCommitService_NumberOfWaitingTransactionsForStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationAndCommitServiceServer).NumberOfWaitingTransactionsForStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidationAndCommitService_SetLastCommittedBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protoblocktx.LastCommittedBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationAndCommitServiceServer).SetLastCommittedBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidationAndCommitService_SetLastCommittedBlockNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationAndCommitServiceServer).SetLastCommittedBlockNumber(ctx, req.(*protoblocktx.LastCommittedBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidationAndCommitService_GetLastCommittedBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationAndCommitServiceServer).GetLastCommittedBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidationAndCommitService_GetLastCommittedBlockNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationAndCommitServiceServer).GetLastCommittedBlockNumber(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ValidationAndCommitService_ServiceDesc is the grpc.ServiceDesc for ValidationAndCommitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValidationAndCommitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protovcservice.ValidationAndCommitService",
	HandlerType: (*ValidationAndCommitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NumberOfWaitingTransactionsForStatus",
			Handler:    _ValidationAndCommitService_NumberOfWaitingTransactionsForStatus_Handler,
		},
		{
			MethodName: "SetLastCommittedBlockNumber",
			Handler:    _ValidationAndCommitService_SetLastCommittedBlockNumber_Handler,
		},
		{
			MethodName: "GetLastCommittedBlockNumber",
			Handler:    _ValidationAndCommitService_GetLastCommittedBlockNumber_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartValidateAndCommitStream",
			Handler:       _ValidationAndCommitService_StartValidateAndCommitStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/protovcservice/vcservice.proto",
}
