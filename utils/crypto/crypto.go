package crypto

import (
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/rand"
	"crypto/sha256"
	"crypto/x509"
	"encoding/base64"
	"encoding/binary"
	"encoding/pem"
	"errors"
	"fmt"
	"math/big"

	"github.ibm.com/decentralized-trust-research/scalable-committer/utils/logging"
	"golang.org/x/crypto/sha3"
)

var logger = logging.New("crypto")

// NewECDSAKey returns a key generated by a random reader.
func NewECDSAKey() (*ecdsa.PrivateKey, error) {
	return ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
}

// NewECDSAKeyWithSeed returns a key generated given a seed number.
func NewECDSAKeyWithSeed(seed int64) (*ecdsa.PrivateKey, error) {
	curve := elliptic.P256()

	seedBytes := make([]byte, 8)
	binary.BigEndian.PutUint64(seedBytes, uint64(seed))

	hash := sha3.New256()
	hash.Write(seedBytes)
	privateKey := new(big.Int).SetBytes(hash.Sum(nil))

	privateKey.Mod(privateKey, curve.Params().N)
	if privateKey.Sign() == 0 {
		return nil, fmt.Errorf("generated zero private key")
	}

	x, y := curve.ScalarBaseMult(privateKey.Bytes())
	return &ecdsa.PrivateKey{
		PublicKey: ecdsa.PublicKey{Curve: curve, X: x, Y: y},
		D:         privateKey,
	}, nil
}

var verifyError = errors.New("failed to verify signature")

// VerifyMessage verifies message using the given public key.
func VerifyMessage(verificationKey *ecdsa.PublicKey, message, signature []byte) error {
	hash := sha256.Sum256(message)

	valid := ecdsa.VerifyASN1(verificationKey, hash[:], signature)
	if !valid {
		logger.Debugf("Signature verification failed.\n\tMessage: [%s]\n\tSignature: [%s]\n", base64.StdEncoding.EncodeToString(message), base64.StdEncoding.EncodeToString(signature))
		return verifyError
	}
	return nil
}

func ParseVerificationKey(key []byte) (*ecdsa.PublicKey, error) {
	block, _ := pem.Decode(key)
	if block == nil || block.Type != "PUBLIC KEY" {
		return nil, fmt.Errorf("failed to decode PEM block containing public key, got %v", block)
	}

	pub, err := x509.ParsePKIXPublicKey(block.Bytes)
	if err != nil {
		return nil, fmt.Errorf("cannot parse public key: %w", err)
	}

	return pub.(*ecdsa.PublicKey), nil
}

func SerializeVerificationKey(key *ecdsa.PublicKey) ([]byte, error) {
	x509encodedPub, err := x509.MarshalPKIXPublicKey(key)
	if err != nil {
		return nil, err
	}

	return pem.EncodeToMemory(&pem.Block{
		Type:  "PUBLIC KEY",
		Bytes: x509encodedPub,
	}), nil
}

func ParseSigningKey(keyContent []byte) (*ecdsa.PrivateKey, error) {
	block, _ := pem.Decode(keyContent)
	if block == nil {
		return nil, errors.New("nil block")
	}
	switch block.Type {
	case "PRIVATE KEY":
		key, err := x509.ParsePKCS8PrivateKey(block.Bytes)
		if err != nil {
			return nil, err
		}
		return key.(*ecdsa.PrivateKey), nil
	case "EC PRIVATE KEY":
		return x509.ParseECPrivateKey(block.Bytes)
	default:
		return nil, fmt.Errorf("unknown block type: %s", block.Type)
	}
}

func SerializeSigningKey(key *ecdsa.PrivateKey) ([]byte, error) {
	x509encodedPri, err := x509.MarshalECPrivateKey(key)
	if err != nil {
		return nil, fmt.Errorf("cannot serialize private key: %w", err)
	}

	return pem.EncodeToMemory(&pem.Block{
		Type:  "EC PRIVATE KEY",
		Bytes: x509encodedPri,
	}), nil
}

func SignMessage(privateKey *ecdsa.PrivateKey, message []byte) ([]byte, error) {
	hash := sha256.Sum256(message)

	sig, err := ecdsa.SignASN1(rand.Reader, privateKey, hash[:])
	if err != nil {
		return nil, err
	}

	return sig, nil
}
