#
# SPDX-License-Identifier: Apache-2.0
#
---
- name: Create configs for coordinator
  hosts: localhost
  vars:
    selected_hosts: "{{groups['coordinators'] | d([]) | intersect(groups[target_hosts] | d([])) | map('extract', hostvars) | list}}"
  roles:
    - kwoodson.yedit
  tasks:
    - name: Create base config
      vars:
        config_root: coordinator
      include_tasks: ../subtasks/create-base-config.yaml
      when: "{{selected_hosts | length > 0}}"
    - name: Calculate shardsservice configs
      vars:
        num_shards: 1
        shard_servers: 3
        shardsservice_hosts: "{{(groups['shardsservices'] | d([]))[0:shard_servers | int - 1] | map('extract', hostvars) | list}}"
        shardsservice_endpoints: "{{shardsservice_hosts | map(attribute='ansible_host') | zip(shardsservice_hosts | map(attribute='service_port')) | map('join', ':') | list}}"
      set_fact:
        shardsservice_configs: "{{shardsservice_configs | d([])  + [{'endpoint': endpoint, 'num-shards': num_shards}]}}"
      loop: "{{shardsservice_endpoints}}"
      loop_control:
        loop_var: endpoint
    - name: Calculate sigservice configs
      vars:
        sig_verifiers: 3
        sigverifier_hosts: "{{(groups['sigservices'] | d([]))[0:sig_verifiers | int - 1] | map('extract', hostvars) | list}}"
        sigverifier_endpoints: "{{sigverifier_hosts | map(attribute='ansible_host') | zip(sigverifier_hosts | map(attribute='service_port')) | map('join', ':') | list}}"
      set_fact:
        sigservice_configs: "{{sigverifier_endpoints}}"
    - name: Set shard servers and sigverifiers
      vars:
        coordinator_instance: "{{selected_hosts | first}}"
      yedit:
        src: "{{dst_dir}}/{{coordinator_instance.inventory_hostname}}/{{coordinator_instance.config}}"
        edits:
          - key: coordinator.shards-servers.servers
            value: "{{shardsservice_configs}}"
          - key: coordinator.sig-verifiers.endpoints
            value: "{{sigservice_configs}}"
      when: selected_hosts | length > 0
