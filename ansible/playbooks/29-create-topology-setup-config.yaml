#
# SPDX-License-Identifier: Apache-2.0
#
---
- name: Create config destination folder
  hosts: localhost
  tasks:
    - name: Create tmp
      file:
        path: "{{dst_dir}}"
        state: directory
- name: Create base configs and replace endpoints for all services
  hosts: localhost
  vars:
    filepath: "{{dst_dir}}/topology-setup-config.yaml"
    topology_name: default
    log_level: WARNING
  roles:
    - kwoodson.yedit
  tasks:
    - name: Prepare orderers
      set_fact:
        orderers: "{{orderers | d([])  + [{
          'config': {
            'name': instance.inventory_hostname,
            'organization': instance.organization,
            'host': instance.ansible_host,
            'ports': {
              'Listen': instance.service_port | d(0),
              'Profile': instance.profile_port | d(0),
              'Operations': instance.ops_port | d(0),
              'Cluster': instance.cluster_port | d(0)
            }
          }
        }]}}"
      loop: "{{groups['orderingservices'] | d([]) | map('extract', hostvars) | list}}"
      loop_control:
        loop_var: instance
    - name: Prepare peers
      set_fact:
        peers: "{{peers | d([])  + [{
          'config': {
            'name': instance.inventory_hostname,
            'organization': instance.organization,
            'host': instance.ansible_host,
            'ports': {
              'Listen': instance.service_port | d(0),
              'Profile': instance.profile_port | d(0),
              'Operations': instance.ops_port | d(0),
              'Chaincode': instance.chaincode_port | d(0),
              'Events': instance.events_port | d(0),
              'P2P': instance.p2p_port | d(0),
              'Web': instance.web_port | d(0),
            }
          }
        }]}}"
      loop: "{{groups['peerservices'] | d([]) | map('extract', hostvars) | list}}"
      loop_control:
        loop_var: instance
    - name: Prepare peers
      vars:
        instance: "{{groups['sidecars'] | d([]) | map('extract', hostvars) | first}}"
      set_fact:
        sidecar: "{{{
          'config': {
            'name': instance.inventory_hostname,
            'organization': instance.organization,
            'host': instance.ansible_host,
            'ports': {'Listen': instance.service_port | d(0)}
          }
        }}}"
      when: "{{groups['sidecars'] | d([]) | length > 0}}"
    - name: Create Fabric setup
      yedit:
        src: "{{filepath}}"
        edits:
          - key: topology-setup.fabric.name
            value: "{{topology_name}}"
          - key: topology-setup.fabric.log-level
            value: "{{log_level}}"
          - key: topology-setup.fabric.channel-ids
            value: "{{channel_ids}}"
          - key: topology-setup.fabric.peers
            value: "{{peers}}"
          - key: topology-setup.fabric.sidecar
            value: "{{sidecar | d({})}}"
          - key: topology-setup.fabric.orderers
            value: "{{orderers}}"
      when: peers | d([]) | length > 0 and orderers | d([]) | length > 0
    - name: Prepare FSC nodes
      set_fact:
        fsc_nodes: "{{fsc_nodes | d([])  + [{
          'config': {
            'name': instance.inventory_hostname,
            'organization': instance.organization,
            'host': instance.ansible_host,
            'ports': {
              'Listen': instance.service_port | d(0),
              'Web': instance.web_port | d(0),
              'P2P': instance.p2p_port | d(0),
              'Operations': instance.ops_port | d(0),
            }
          },
          'view-factories': instance.view_factories | d([]),
          'responders': instance.responders | d([]),
          'intermediary-identity': instance.intermediary_identity | d(''),
          'owner-identities': instance.owner_identities | d([]),
          'issuer-identities': instance.issuer_identities | d([]),
          'auditor': instance.auditor | d(false),
          'certifier': instance.certifier | d(false),
          'endorser': instance.endorser | d(false),
          'bootstrap': instance.bootstrap | d(false)
        }]}}"
      loop: "{{groups['fscservices'] | d([]) | map('extract', hostvars) | list}}"
      loop_control:
        loop_var: instance
    - name: Create FSC setup
      vars:
        monitoring_hosts: "{{groups['monitoring'] | d([]) | map('extract', hostvars) | list}}"
        jaeger_endpoints: "{{monitoring_hosts | map(attribute='ansible_host') | zip(monitoring_hosts | map(attribute='jaeger_optl_exporter_port')) | map('join', ':') | list}}"
      yedit:
        src: "{{filepath}}"
        edits:
          - key: topology-setup.fsc.sdk-driver
            value: snarkgh
          - key: topology-setup.fsc.nodes
            value: "{{fsc_nodes}}"
          - key: topology-setup.fsc.otracing
            value: "{{'' if jaeger_endpoints | length == 0 else jaeger_endpoints | first}}"
      when: fsc_nodes | d([]) | length > 0