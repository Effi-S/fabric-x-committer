package loadgen

import (
	"github.ibm.com/decentralized-trust-research/scalable-committer/loadgen/adapters"
	"github.ibm.com/decentralized-trust-research/scalable-committer/loadgen/workload"
	"github.ibm.com/decentralized-trust-research/scalable-committer/utils/config"
	"github.ibm.com/decentralized-trust-research/scalable-committer/utils/monitoring"
)

type (
	// ClientConfig is a struct that contains the configuration for the client.
	ClientConfig struct {
		Adapter adapters.AdapterConfig `mapstructure:",squash" yaml:",inline"`

		Monitoring *monitoring.Config `mapstructure:"monitoring" yaml:"monitoring"`
		BufferSize int                `mapstructure:"buffer-size" yaml:"buffer-size"`

		LoadProfile *workload.Profile       `mapstructure:"load-profile" yaml:"load-profile"`
		Stream      *workload.StreamOptions `mapstructure:"stream" yaml:"stream"`

		// Generate If omitted, all phases will be generated by default.
		Generate *Generate `mapstructure:"generate" yaml:"generate"`
	}

	// Generate specify which phases to generate.
	Generate struct {
		Namespaces bool `mapstructure:"namespaces" yaml:"namespaces"`
		Load       bool `mapstructure:"load" yaml:"load"`
	}
)

// ReadConfig is a function that reads the client configuration.
func ReadConfig() *ClientConfig {
	wrapper := new(ClientConfig)
	config.Unmarshal(wrapper)
	return wrapper
}
