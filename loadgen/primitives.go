package loadgen

import (
	"math/rand"

	"github.com/google/uuid"
)

// Generator generates new T each time Next() is called.
type Generator[T any] interface {
	Next() T
}

// ChanGenerator pull values from a channel.
type ChanGenerator[T any] struct {
	Chan <-chan T
}

// Next yields a new value from the channel.
func (g *ChanGenerator[T]) Next() T {
	return <-g.Chan
}

// FloatToIntGenerator wraps a float generator and produces integers.
type FloatToIntGenerator struct {
	FloatGen Generator[float64]
}

// Next yields a new integer.
func (g *FloatToIntGenerator) Next() int {
	return int(g.FloatGen.Next())
}

// FloatToPositiveIntGenerator wraps a float generator and produces positive int (>=1).
type FloatToPositiveIntGenerator struct {
	FloatGen Generator[float64]
}

// Next yields a new integer.
func (g *FloatToPositiveIntGenerator) Next() int {
	return Max(int(g.FloatGen.Next()), 1)
}

// FloatToBooleanGenerator wraps a float generator and produces boolean (true when >=1).
type FloatToBooleanGenerator struct {
	FloatGen Generator[float64]
}

// Next yields a new integer.
func (g *FloatToBooleanGenerator) Next() bool {
	return int(g.FloatGen.Next()) > 0
}

// ConstGenerator produces a constant value.
type ConstGenerator[T any] struct {
	Const T
}

// Next yields the constant value.
func (g *ConstGenerator[T]) Next() T {
	return g.Const
}

// ByteArrayGenerator generates a random byte array of Size.
type ByteArrayGenerator struct {
	Size uint32
	Rnd  *rand.Rand
}

// Next yields a byte array.
func (g *ByteArrayGenerator) Next() []byte {
	batch := make([]byte, g.Size)
	_, err := g.Rnd.Read(batch)
	Must(err)
	return batch
}

// NilByteArrayGenerator generates nil.
type NilByteArrayGenerator struct{}

// Next yields a nil byte array.
func (*NilByteArrayGenerator) Next() []byte {
	return nil
}

// MultiGenerator generates an array of size determined by Count, with items generated by Gen.
type MultiGenerator[T any] struct {
	Count Generator[int]
	Gen   Generator[T]
}

// Next yields an array of items.
func (g *MultiGenerator[T]) Next() []T {
	return GenerateArray[T](g.Gen, g.Count.Next())
}

// GenerateArray generates an array of items of the requested size given a generator.
func GenerateArray[T any](g Generator[T], size int) []T {
	arr := make([]T, size)
	for i := range arr {
		arr[i] = g.Next()
	}
	return arr
}

// UUIDGenerator generates UUIDs.
type UUIDGenerator struct {
	Rnd *rand.Rand
}

// Next yields a UUID.
func (g *UUIDGenerator) Next() string {
	uuidObj, err := uuid.NewRandomFromReader(g.Rnd)
	Must(err)
	return uuidObj.String()
}
