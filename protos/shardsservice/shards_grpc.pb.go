// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: shardsservice/shards.proto

package shardsservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShardsClient is the client API for Shards service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShardsClient interface {
	SetupShards(ctx context.Context, in *ShardsSetupRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteShards(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StartPhaseOneStream(ctx context.Context, opts ...grpc.CallOption) (Shards_StartPhaseOneStreamClient, error)
	StartPhaseTwoStream(ctx context.Context, opts ...grpc.CallOption) (Shards_StartPhaseTwoStreamClient, error)
}

type shardsClient struct {
	cc grpc.ClientConnInterface
}

func NewShardsClient(cc grpc.ClientConnInterface) ShardsClient {
	return &shardsClient{cc}
}

func (c *shardsClient) SetupShards(ctx context.Context, in *ShardsSetupRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/shardsservice.Shards/SetupShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardsClient) DeleteShards(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/shardsservice.Shards/DeleteShards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardsClient) StartPhaseOneStream(ctx context.Context, opts ...grpc.CallOption) (Shards_StartPhaseOneStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Shards_ServiceDesc.Streams[0], "/shardsservice.Shards/StartPhaseOneStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &shardsStartPhaseOneStreamClient{stream}
	return x, nil
}

type Shards_StartPhaseOneStreamClient interface {
	Send(*PhaseOneRequestBatch) error
	Recv() (*PhaseOneResponseBatch, error)
	grpc.ClientStream
}

type shardsStartPhaseOneStreamClient struct {
	grpc.ClientStream
}

func (x *shardsStartPhaseOneStreamClient) Send(m *PhaseOneRequestBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shardsStartPhaseOneStreamClient) Recv() (*PhaseOneResponseBatch, error) {
	m := new(PhaseOneResponseBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shardsClient) StartPhaseTwoStream(ctx context.Context, opts ...grpc.CallOption) (Shards_StartPhaseTwoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Shards_ServiceDesc.Streams[1], "/shardsservice.Shards/StartPhaseTwoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &shardsStartPhaseTwoStreamClient{stream}
	return x, nil
}

type Shards_StartPhaseTwoStreamClient interface {
	Send(*PhaseTwoRequestBatch) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type shardsStartPhaseTwoStreamClient struct {
	grpc.ClientStream
}

func (x *shardsStartPhaseTwoStreamClient) Send(m *PhaseTwoRequestBatch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shardsStartPhaseTwoStreamClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShardsServer is the server API for Shards service.
// All implementations must embed UnimplementedShardsServer
// for forward compatibility
type ShardsServer interface {
	SetupShards(context.Context, *ShardsSetupRequest) (*Empty, error)
	DeleteShards(context.Context, *Empty) (*Empty, error)
	StartPhaseOneStream(Shards_StartPhaseOneStreamServer) error
	StartPhaseTwoStream(Shards_StartPhaseTwoStreamServer) error
	mustEmbedUnimplementedShardsServer()
}

// UnimplementedShardsServer must be embedded to have forward compatible implementations.
type UnimplementedShardsServer struct {
}

func (UnimplementedShardsServer) SetupShards(context.Context, *ShardsSetupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupShards not implemented")
}
func (UnimplementedShardsServer) DeleteShards(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShards not implemented")
}
func (UnimplementedShardsServer) StartPhaseOneStream(Shards_StartPhaseOneStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartPhaseOneStream not implemented")
}
func (UnimplementedShardsServer) StartPhaseTwoStream(Shards_StartPhaseTwoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StartPhaseTwoStream not implemented")
}
func (UnimplementedShardsServer) mustEmbedUnimplementedShardsServer() {}

// UnsafeShardsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShardsServer will
// result in compilation errors.
type UnsafeShardsServer interface {
	mustEmbedUnimplementedShardsServer()
}

func RegisterShardsServer(s grpc.ServiceRegistrar, srv ShardsServer) {
	s.RegisterService(&Shards_ServiceDesc, srv)
}

func _Shards_SetupShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardsSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardsServer).SetupShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shardsservice.Shards/SetupShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardsServer).SetupShards(ctx, req.(*ShardsSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shards_DeleteShards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardsServer).DeleteShards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shardsservice.Shards/DeleteShards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardsServer).DeleteShards(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shards_StartPhaseOneStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShardsServer).StartPhaseOneStream(&shardsStartPhaseOneStreamServer{stream})
}

type Shards_StartPhaseOneStreamServer interface {
	Send(*PhaseOneResponseBatch) error
	Recv() (*PhaseOneRequestBatch, error)
	grpc.ServerStream
}

type shardsStartPhaseOneStreamServer struct {
	grpc.ServerStream
}

func (x *shardsStartPhaseOneStreamServer) Send(m *PhaseOneResponseBatch) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shardsStartPhaseOneStreamServer) Recv() (*PhaseOneRequestBatch, error) {
	m := new(PhaseOneRequestBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Shards_StartPhaseTwoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShardsServer).StartPhaseTwoStream(&shardsStartPhaseTwoStreamServer{stream})
}

type Shards_StartPhaseTwoStreamServer interface {
	SendAndClose(*Empty) error
	Recv() (*PhaseTwoRequestBatch, error)
	grpc.ServerStream
}

type shardsStartPhaseTwoStreamServer struct {
	grpc.ServerStream
}

func (x *shardsStartPhaseTwoStreamServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shardsStartPhaseTwoStreamServer) Recv() (*PhaseTwoRequestBatch, error) {
	m := new(PhaseTwoRequestBatch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Shards_ServiceDesc is the grpc.ServiceDesc for Shards service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shards_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shardsservice.Shards",
	HandlerType: (*ShardsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupShards",
			Handler:    _Shards_SetupShards_Handler,
		},
		{
			MethodName: "DeleteShards",
			Handler:    _Shards_DeleteShards_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartPhaseOneStream",
			Handler:       _Shards_StartPhaseOneStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StartPhaseTwoStream",
			Handler:       _Shards_StartPhaseTwoStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "shardsservice/shards.proto",
}
